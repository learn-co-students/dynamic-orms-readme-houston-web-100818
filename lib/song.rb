require_relative "../config/environment.rb"
require 'active_support/inflector'
require 'pry'

class Song

  # returns table name pertaining to this class, in string form
  def self.table_name
    self.to_s.downcase.pluralize
  end

  # returns column names for this class' table, as an array of strings
  def self.column_names
    DB[:conn].results_as_hash = true

    sql = "pragma table_info('#{table_name}')"
    table_info = DB[:conn].execute(sql)
    column_names = []
    table_info.each do |row|
      column_names << row["name"]
    end
    column_names.compact
  end

  # iterates over the column_names array of strings, converts each to a symbol, and sets those symbols to attr_accessors
  self.column_names.each do |col_name|
    attr_accessor col_name.to_sym
  end

  # iterates over the input hash's attributes, sends each value into its corresponding attr_accessor
  def initialize(options={})
    options.each do |property, value|
      self.send("#{property}=", value)
    end
  end

  # defines an instance method that grabs the table_name for this class
  def table_name_for_insert
    self.class.table_name
  end

  # defines an instance method that grabs the column names from the table for this class, but deletes 'id' because we don't want to insert an id into the DB, id should be generated by DB... then converts that array of column names into a single comma-separated string
  def col_names_for_insert
    self.class.column_names.delete_if {|col| col == "id"}.join(", ")
  end

  # defines an instance method that iterates over column names, grabbing the attr_reader for each (via send), and joining them together into one string, which consists of comma-separated strings for each value (because this is what the SQL query needs to receive for VALUES)
  def values_for_insert
    values = []
    self.class.column_names.each do |col_name|
      values << "'#{send(col_name)}'" unless send(col_name).nil?
    end
    values.join(", ")
  end

  def save
    sql = "INSERT INTO #{table_name_for_insert} (#{col_names_for_insert}) VALUES (#{values_for_insert})"
    binding.pry
    DB[:conn].execute(sql)
    @id = DB[:conn].execute("SELECT last_insert_rowid() FROM #{table_name_for_insert}")[0][0]
  end

  def self.find_by_name(name)
    sql = "SELECT * FROM #{self.table_name} WHERE name = '#{name}'"
    DB[:conn].execute(sql)
  end

end
